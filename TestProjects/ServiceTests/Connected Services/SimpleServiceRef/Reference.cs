//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTests.SimpleServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleResponse", Namespace="http://schemas.datacontract.org/2004/07/ServiceAbstractions.SimpleService")]
    [System.SerializableAttribute()]
    public partial class SimpleResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ResponseTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ResponseTime {
            get {
                return this.ResponseTimeField;
            }
            set {
                if ((this.ResponseTimeField.Equals(value) != true)) {
                    this.ResponseTimeField = value;
                    this.RaisePropertyChanged("ResponseTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SimpleServiceRef.ISimpleService")]
    public interface ISimpleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/SinkRequest", ReplyAction="http://tempuri.org/ISimpleService/SinkRequestResponse")]
        void SinkRequest(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/SinkRequest", ReplyAction="http://tempuri.org/ISimpleService/SinkRequestResponse")]
        System.Threading.Tasks.Task SinkRequestAsync(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/GetSimpleResponse", ReplyAction="http://tempuri.org/ISimpleService/GetSimpleResponseResponse")]
        ServiceTests.SimpleServiceRef.SimpleResponse GetSimpleResponse(string request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimpleService/GetSimpleResponse", ReplyAction="http://tempuri.org/ISimpleService/GetSimpleResponseResponse")]
        System.Threading.Tasks.Task<ServiceTests.SimpleServiceRef.SimpleResponse> GetSimpleResponseAsync(string request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimpleServiceChannel : ServiceTests.SimpleServiceRef.ISimpleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimpleServiceClient : System.ServiceModel.ClientBase<ServiceTests.SimpleServiceRef.ISimpleService>, ServiceTests.SimpleServiceRef.ISimpleService {
        
        public SimpleServiceClient() {
        }
        
        public SimpleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SimpleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimpleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SinkRequest(string request) {
            base.Channel.SinkRequest(request);
        }
        
        public System.Threading.Tasks.Task SinkRequestAsync(string request) {
            return base.Channel.SinkRequestAsync(request);
        }
        
        public ServiceTests.SimpleServiceRef.SimpleResponse GetSimpleResponse(string request) {
            return base.Channel.GetSimpleResponse(request);
        }
        
        public System.Threading.Tasks.Task<ServiceTests.SimpleServiceRef.SimpleResponse> GetSimpleResponseAsync(string request) {
            return base.Channel.GetSimpleResponseAsync(request);
        }
    }
}
